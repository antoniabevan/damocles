MODULE class_dust

    USE globals

    implicit none

    TYPE species_obj                        !each species has the following attributes
        INTEGER ::  id                          !id number
        INTEGER ::  nsizes                      !number of grain sizes
        INTEGER ::  nwav                        !number of wavelengths
        REAL    ::  interval                    !spacing of grain sizes
        REAL    ::  amin,amax                   !amin, amax
        REAL    ::  weight                      !relative weight of species (fractional weighting by area)
        REAL    ::  mweight                     !relative weight of species (fractional weighting by mass)
        REAL    ::  vweight                     !relative weight of species (fraction weighting by volume)
        REAL    ::  power                       !exponent for power law size distribution
        REAL    ::  rhograin                    !density of a dust grain

        CHARACTER(LEN=50)   ::  dataFile        !data file containing optical constants for species
        REAL,ALLOCATABLE    ::  radius(:,:)      !array containing grain sizes (1) and weightings (2)
                                                !weightings are relative abundance by number
        REAL,ALLOCATABLE    ::  sca_opacity(:)  !array containing scattering extinctions at each wavelength
        REAL,ALLOCATABLE    ::  ext_opacity(:)  !array containing extinctions at each wavelength
        REAL,ALLOCATABLE    ::  g(:)            !array containing g (asymmetry factor) at each wavelength
        REAL,ALLOCATABLE    ::  wav(:)          !array containing the wavelengths
        REAL,ALLOCATABLE    ::  albedo(:)       !array containing albedos for each wavelength
    END TYPE species_obj

    TYPE dust_obj
        INTEGER                       ::  n_species           !number of species
        REAL                          ::  total_weight        !!to check that total weights of species add to 1
        REAL                          ::  mass                !total mass of dust (M_sun)
        REAL                          ::  mass_grams          !total mass of dust (grams)
        TYPE(species_obj),ALLOCATABLE ::  species(:)
    END TYPE dust_obj

    TYPE(dust_obj) :: dust

contains

    SUBROUTINE calculate_sizes()

        !read species file in
        OPEN(21,file = species_file)
        READ(21,*) dust%n_species
        READ(21,*)
        READ(21,*)

        !write to log file
        WRITE(55,*) 'number of species',dust%n_species

        !allocate space for number of different dust species
        ALLOCATE(dust%species(dust%n_species))

        !sum of sepcified species weightings - check sum to 1
        !initialise to 0
        dust%total_weight=0.

        !read in properties for each species (weighting, amin, amax etc.)
        !allocate space for grain size distributions for each species
        !initialise grain sizes in grain size distributions to 0
        DO ii=1,dust%n_species
            READ(21,*) dust%species(ii)%id,dust%species(ii)%dataFile, dust%species(ii)%weight,dust%species(ii)%amin, &
                & dust%species(ii)%amax,dust%species(ii)%power,dust%species(ii)%nsizes

            ALLOCATE(dust%species(ii)%radius(dust%species(ii)%nsizes,2))

            dust%species(ii)%radius=0
            dust%species(ii)%dataFile=trim(dust%species(ii)%dataFile)
            dust%total_weight=dust%total_weight+dust%species(ii)%weight
        END DO

        CLOSE(21)

        !check that the sum of the specified species weightings sums to 1
        IF (dust%total_weight/=1) THEN
            PRINT*, 'WARNING - total species weights do not add to 1'
            PRINT*, 'total weights =',dust%total_weight
        END IF

        !generate grain sizes and relative weights
        DO ii=1,dust%n_species
            !calculate internal between grain radii (linear)
            dust%species(ii)%interval=(dust%species(ii)%amax-dust%species(ii)%amin)/real(dust%species(ii)%nsizes)
            norm=0
            WRITE(55,*) 'area weight',dust%species(ii)%weight

            !!check conversion to weighting by volume
            IF (dust%n_species /= 1) THEN
                PRINT*, 'You have requested more than 1 dust species - please check the volume weighting calculation. Aborting'
                STOP
            END IF
            dust%species(ii)%vweight=(1.0/(1.0+(1.0/dust%species(ii)%weight-1)**(1.5)))
            WRITE(55,*),'volume weight',dust%species(ii)%vweight

            !generate grain radii for grain size distribution
            !calculate sacling factor (norm) to be used to normalise abundances/weightings
            DO jj=1,dust%species(ii)%nsizes
                dust%species(ii)%radius(jj,1)=dust%species(ii)%amin+((jj-1)*dust%species(ii)%interval)
                norm=norm+(dust%species(ii)%radius(jj,1)**dust%species(ii)%power)
            END DO

            !generate weighting (relative abundance by number) for each grain radius (normalised so sum is unity)
            DO jj=1,dust%species(ii)%nsizes
                dust%species(ii)%radius(jj,2)=(dust%species(ii)%radius(jj,1)**dust%species(ii)%power)/norm
            END DO
        END DO


    END SUBROUTINE calculate_sizes

END MODULE class_dust
