MODULE initialise

    USE class_line
    USE class_geometry
    USE class_dust
    USE class_grid
    USE input


    IMPLICIT NONE


    REAL    ::  totvol          !total volume of supernova in 1e42cm^3
    REAL    ::  vol


    INTEGER(8)     ::  iP,idP,n,iGP,idPP,n_inactive,inu,freq(1),nsize, &
        & ios,nabs,iDoublet
    INTEGER :: iSh,n_threads,id(1),id_V(1)
    REAL :: width(3),E_0,nu_0,nu_max,nu_min, &
        & SCAT_RF_PT(2),nu_bin_width,lambda_bin,vel_bin, &
        & sizeparam, Tsubl,tot,shell_width, alb, &
        & const,csa,dummy,lambda_ext(1),lambda_sca(1),lambda_ext_V(1)
    REAL,DIMENSION(:,:),ALLOCATABLE :: nu_bin,tmp, &
        & grain_rad,Qext,Qsca, &
        & ggsca,grain_id, &
        & RSh,ab
    INTEGER :: ncl
    REAL,DIMENSION(:),ALLOCATABLE :: grid,mgrain

    REAL ::SCAT_RF_SN(2), &
        & SCAT_FIN(2),POS_SPH1(3),R_P,ndustav

    INTEGER(8),DIMENSION(:,:),ALLOCATABLE :: ix,iy,iz,NP
    REAL,DIMENSION(:),ALLOCATABLE      :: NP_BIN,diff

    CHARACTER(LEN=1024) :: filename,junk

    COMPLEX :: refrel

contains

    SUBROUTINE set_grid_globals()

        PRINT*,"Total number of cells",mothergrid%totcells

        ALLOCATE(grid_cell(mothergrid%totcells))
        ALLOCATE(nu_bin(n_bins,2))
        ALLOCATE(tmp(n_bins,1))
        ALLOCATE(grid(mothergrid%ncells(1)+mothergrid%ncells(2)+mothergrid%ncells(3)))
        ALLOCATE(NP(mothergrid%totcells,1))
        ALLOCATE(NP_BIN(n_bins))
        ALLOCATE(RSh(n_shells+1,2))


        nu_bin=0
        tmp=0
        grid=0
        NP=0
        NP_BIN=0
        RSh=0

        !CONSTRUCT DYNAMIC FILENAMES FOR EASY REFERENCE
        !WRITE(filename,'(A,E7.1E2,A,F4.2,A,F4.2,A,I0,A)') 'output/',dust%mass,'_rho',q,'_v',l,'_vs',VelShift,'.out'



        !CALCULATE OPACITIES
        CALL calculate_opacities()


        !CONSTRUCT GRID WITH NUMBER OF PHOTONS EMITTED PER CELL
        CALL construct_grid


        !CALCULATE FREQUENCY OF EMITTED LINE IN Hz
        nu_0=c*10**9/line%wavelength
        PRINT*,'LAMBDA_0',line%wavelength
        !CALCULATE AVERAGE OPTICAL DEPTH FROM Rin to Rout
        PRINT*,'EXTINCTION FOR LAMBDA_0 ',lambda_ext
        PRINT*,'SCATTERING FOR LAMBDA_0',lambda_sca
        PRINT*,'ALBEDO FOR LAMBDA_0',lambda_sca/lambda_ext
        PRINT*,'AVERAGE OPTICAL DEPTH IN LAMBDA_0',ndustav*lambda_ext*(dust_geometry%R_max_cm-dust_geometry%R_min_cm)
        PRINT*,'AVERAGE OPTICAL DEPTH IN V',ndustav*lambda_ext_V*(dust_geometry%R_max_cm-dust_geometry%R_min_cm)
        PRINT*,'AVERAGE NUMBER DENSITY',ndustav

        PRINT*,'EFFECTIVE SPHERICAL RADIUS OF CLUMP (cm)',width(1)*(3.0/(4.0*pi))**0.3333333
        PRINT*,'EFFECTIVE SPHERICAL RADIUS AS A FRACTION OF Rout',(width(1)/dust_geometry%R_max_cm)*(3.0/(4.0*pi))**0.3333333
        PRINT*,'AVERAGE OPTICAL DEPTH OF A CELL IN LAMBDA_0',ndustav*lambda_ext*0.5*width(1)*(3.0/(4.0*pi))**0.3333333
        PRINT*,'AVERAGE OPTICAL DEPTH OF A CELL IN LAMBDA_V',ndustav*lambda_ext_V*0.5*width(1)*(3.0/(4.0*pi))**0.3333333
!CALCULATE FREQUENCY BINS ARRAY

            !MAX element here to account for ES velocities

            IF (lg_doublet) THEN
                IF (line%doublet_wavelength_2>line%doublet_wavelength_1) THEN
                    nu_max=5*((c*10**9/line%doublet_wavelength_1)/(1-MAX(dust_geometry%v_max,2000.0)*10**3/c))        !arbitrary factor of 5 to compensate for multiple scatterings
                    nu_min=0.2*((c*10**9/line%doublet_wavelength_2)/(1+MAX(dust_geometry%v_max,2000.0)*10**3/c))        !as above
                ELSE
                nu_max=5*((c*10**9/line%doublet_wavelength_2)/(1-MAX(dust_geometry%v_max,2000.0)*10**3/c))        !arbitrary factor of 5 to compensate for multiple scatterings
                nu_min=0.2*((c*10**9/line%doublet_wavelength_1)/(1+MAX(dust_geometry%v_max,2000.0)*10**3/c))        !as above
            END IF
            ELSE
            nu_max=5*(nu_0/(1-MAX(dust_geometry%v_max,2000.0)*10**3/c))  !arbitrary factor of 4 to compensate for multiple scatterings
                                                                                                !shifting nu beyond maxnu for 1 scattering event
            nu_min=0.2*(nu_0/(1+MAX(dust_geometry%v_max,2000.0)*10**3/c))                !as above
            END IF
        nu_bin_width=(nu_max-nu_min)/n_bins

        !CALCULATE FREQUENCY BINS AND WRITE TO FILE
        IF (iDoublet==1) THEN
        DO inu=1,n_bins
            nu_bin(inu,1)=nu_min+((inu-1)*nu_bin_width)
            nu_bin(inu,2)=nu_min+((inu)*nu_bin_width)
        END DO
        END IF
    END SUBROUTINE


END MODULE
