MODULE initialise

    USE globals
    USE class_line
    USE class_geometry
    USE class_dust
    USE class_grid
    USE class_freq_grid
    USE input


    IMPLICIT NONE

contains

    SUBROUTINE write_to_file()

        !real number format, 6 characters, 2dp
101     format(a35'   'f6.2)

        !integer format, 4 characters
102     format(a35'   'i4)

        !scientific format, 5 characters, 2dp
103     format(a35'   'e5.2)

        !create folders dependent on date/time of run if requested
        !otherwise overwrite and store in main output folder
        IF (lg_store_all) THEN
            call date_and_time(date,time)
            run_no_string = time(1:2) // '.' // time(3:4) // '.' // time(5:6)

            call system('mkdir -p output/output_' // date // '/run_' // run_no_string)
            call system('cp *.in output/output_' // date // '/run_' // run_no_string // '/.')

            !open output files to record resultant modelled line profile, input parameters and properties of model
            OPEN(25,file='output/output_' // date // '/run_' // run_no_string // '/integrated_line_profile.out')
            OPEN(26,file='output/output_' // date // '/run_' // run_no_string // '/multiple_LOS_line_profiles.out')
            OPEN(27,file='output/output_' // date // '/run_' // run_no_string // '/model_properties.out')

        ELSE
            !open output files to record resultant modelled line profile, input parameters and properties of model
            OPEN(25,file='output/integrated_line_profile.out')
            OPEN(26,file='output/multiple_LOS_line_profiles.out')
            OPEN(27,file='output/model_properties.out')
        END IF

        !write out modelled line profile
        DO ii=1,nu_grid%n_bins-1
            WRITE(25,*) nu_grid%lambda_bin(ii),nu_grid%vel_bin(ii),line%initial_energy*profile_array(ii)
            IF (lg_multi_LOS) THEN
                DO jj=1,n_angle_divs
                    DO kk=1,n_angle_divs
                        WRITE(26,*) nu_grid%lambda_bin(ii),line%initial_energy*profile_los_array(ii,jj,kk)
                    END DO
                END DO
            END IF
        END DO

        WRITE(27,101)"active rest wavelength:",line%wavelength
        WRITE(27,101)'minimum velocity at inner radius',(gas_geometry%R_min/gas_geometry%R_max)*gas_geometry%v_max
        WRITE(27,101)'dust velocity index',dust_geometry%v_power
        WRITE(27,101)'gas velocity index',gas_geometry%v_power
        WRITE(27,101)'dust density index',dust_geometry%rho_power
        WRITE(27,101)'gas density index',gas_geometry%rho_power
        WRITE(27,101)'Rmax dust',dust_geometry%R_max
        WRITE(27,101)'Rmin dust',dust_geometry%R_min
        WRITE(27,101)'Rmax gas',gas_geometry%R_max
        WRITE(27,101)'Rmin gas',gas_geometry%R_min
        WRITE(27,101)'LAMBDA_0',line%wavelength

        WRITE(27,101)'dust r ratio',dust_geometry%R_ratio
        WRITE(27,101)'gas r ratio',gas_geometry%R_ratio

        WRITE(27,101)'total volume of supernova in e42cm^3',tot_vol
        WRITE(27,101)'VOLUME OF GRID CELL (and therefore clump) in e42cm^3',mothergrid%cell_vol
        WRITE(27,101)'GRID CELL WIDTH (X) in cm: ',mothergrid%cell_width(1)
        WRITE(27,101)'GRID CELL WIDTH (Y) in cm: ',mothergrid%cell_width(2)
        WRITE(27,101)'GRID CELL WIDTH (Z) in cm: ',mothergrid%cell_width(3)

        !CALCULATE AVERAGE OPTICAL DEPTH FROM Rin to Rout
        WRITE(27,101)'EXTINCTION FOR LAMBDA_0 ',dust%lambda_ext
        WRITE(27,101)'SCATTERING FOR LAMBDA_0',dust%lambda_sca
        WRITE(27,101)'ALBEDO FOR LAMBDA_0',dust%lambda_sca/dust%lambda_ext
        WRITE(27,101)'AVERAGE OPTICAL DEPTH IN LAMBDA_0',mothergrid%n_rho_dust_av*dust%lambda_ext*(dust_geometry%R_max_cm-dust_geometry%R_min_cm)
        WRITE(27,101)'AVERAGE OPTICAL DEPTH IN V',mothergrid%n_rho_dust_av*dust%lambda_ext_V*(dust_geometry%R_max_cm-dust_geometry%R_min_cm)
        WRITE(27,101)'AVERAGE NUMBER DENSITY',mothergrid%n_rho_dust_av


        WRITE(27,101)'mass weight',dust%species%m_weight
        DO ii=1,dust%n_species
            WRITE(27,102)'species number:',dust%species(ii)%id

            WRITE(27,101)'albedo at rest frame wavelength',dust%species(ii)%albedo(line%wav_bin)
        END DO

        WRITE(27,101)'EFFECTIVE SPHERICAL RADIUS OF CLUMP (cm)',mothergrid%cell_width(1)*(3.0/(4.0*pi))**0.3333333
        WRITE(27,101)'EFFECTIVE SPHERICAL RADIUS AS A FRACTION OF Rout',(mothergrid%cell_width(1)/dust_geometry%R_max_cm)*(3.0/(4.0*pi))**0.3333333
        WRITE(27,101)'AVERAGE OPTICAL DEPTH OF A CELL IN LAMBDA_0',mothergrid%n_rho_dust_av*dust%lambda_ext*0.5*mothergrid%cell_width(1)*(3.0/(4.0*pi))**0.3333333
        WRITE(27,101)'AVERAGE OPTICAL DEPTH OF A CELL IN LAMBDA_V',mothergrid%n_rho_dust_av*dust%lambda_ext_V*0.5*mothergrid%cell_width(1)*(3.0/(4.0*pi))**0.3333333

        !call construct_freq_grid()

        !post_processing

        !post processing
        !!the below needs tidying and review
        IF (lg_doublet) THEN
            WRITE(27,101)line%luminosity,n_init_packets,n_inactive_packets,2.0*n_init_packets-n_inactive_packets
            line%initial_energy=line%luminosity/real(2.0*n_init_packets-n_inactive_packets)!Energy of a single packet in W/um (note uses actual number of active photons)

        ELSE
            line%initial_energy=line%luminosity/real(n_init_packets-n_inactive_packets)
        END IF

        WRITE(27,*)''
        WRITE(27,*)'**********************'
        !WRITE(27,*)'All percentages out of total number of active packets:'
        !WRITE(27,*)''
        WRITE(27,102)'TOTAL NUMBER OF PACKETS',n_init_packets
        WRITE(27,102)'NUMBER OF ACTIVE(PROPAGATED) PACKETS',n_init_packets-n_inactive_packets
        !WRITE OUT ENERGY FILE - wavelength, velocity, energy (W/um)

        CLOSE(26)


        WRITE(27,101)'average mass density (including clumps) (g/cm3)',(dust%mass_grams*1e-14)/(tot_vol*1e28)


        WRITE(27,103)'mass of interclump medium (Msun)',dust%m_icm
        WRITE(27,103)'mass in clumps (Msun)',dust%m_clump*dust_geometry%n_clumps
        WRITE(27,101)'density constrast',dust_geometry%den_con


        IF (dust_geometry%lg_clumped) THEN
            WRITE(27,102)  'check number of clumps used:'
            WRITE(27,102)  '      using - ',n_clumps
            WRITE(27,102)  '      requested -',dust_geometry%n_clumps

            WRITE(27,101)  'check dust mass in clumps: '
            WRITE(27,101)  '      using - ',m_clumps_check
            WRITE(27,101)  '      requested: ',dust%m_clump*dust_geometry%n_clumps

            WRITE(27,103)  'check mass in ICM:',
            WRITE(27,103)  '        using - ',m_icm_check
            WRITE(27,103)  '        requested - ',dust%m_icm

            WRITE(27,101)  'filling factor',dust_geometry%ff
            WRITE(27,103)  'check total dust mass (rho*V)'
            WRITE(27,103)  '        using - ',m_tot_check
            WRITE(27,103)  '        requested -',dust%mass

        ELSE
            WRITE(27,103)'dust mass check (calculated as rho*V):'
            WRITE(27,103)'      using - ',m_tot_check
            WRITE(27,103)'      requested -',dust%mass
        END IF


        WRITE(27,103)'volume of total grid cells inside SN (e42cm)',no_active_cells*mothergrid%cell_vol
        WRITE(27,101)'average dust grain density per cell (including any clumps)',mothergrid%n_rho_dust_av
        WRITE(27,*)''

        WRITE(27,101)'DUST GRAIN NUMBER DENSITY AT Rin',dust_geometry%rho_in/dust%av_mgrain
        WRITE(27,101)'DUST GRAIN NUMBER DENSITY AT Rout',((dust_geometry%rho_in)*(dust_geometry%R_min_cm/dust_geometry%R_max_cm)**dust_geometry%rho_power)/dust%av_mgrain
        !WRITE(27,*)'*******************'
        !WRITE(27,*)'absorbed weight',w_abs
        !        IF (lg_doublet) THEN
        !            WRITE(27,*)'undepleted luminosity (in units e40 erg/s)',line%luminosity/(1-w_abs/real(n-n_inactive))
        !        ELSE
        !            WRITE(27,*)'undepleted luminosity (in units e40 erg/s)',line%luminosity/(1-w_abs/real(n-n_inactive))
        !        END IF
        !CLOSE(13)
        CLOSE(15)

        !5.02765e8=1e42/1.989e33 i.e. conversion factor for  e42cm3 to cm3 and g to Msun)
        WRITE(27,103)'Dust mass in grid (Msun)',sum(grid_cell(:)%n_rho*(grid_cell(:)%vol)*dust%av_mgrain)*5.02765e8

        !CLOSE(17)
        WRITE(27,101)'albedo',dust%lambda_sca/dust%lambda_ext
        WRITE(27,101)'g_scat',dust%lambda_g_param
        IF (.not. lg_doublet) THEN
            WRITE(27,102)'NUMBER OF INACTIVE PACKETS',n_inactive_packets
            WRITE(27,102)'NUMBER OF ABSORBED PACKETS',n_abs_packets,real(n_abs_packets)*100/real(n_init_packets-n_inactive_packets),'%'
            WRITE(27,101)'ABSORBED WEIGHT PERCENTAGE',abs_frac*100/real(n_packets-n_inactive_packets),'%'
            !WRITE(27,*)''
            !WRITE(27,*)'TOTAL ENERGY',line%luminosity
            !WRITE(27,*)'ENERGY PER PACKET (ACTIVE ONLY)',line%initial_energy
            !WRITE(27,*)'TOTAL ENERGY ABSORBED',n_abs_packets*line%initial_energy
            !WRITE(27,*)''
            WRITE(27,101)'FRACTION OF ESCAPED PACKETS IN LINE OF SIGHT',n_los_packets,real(n_los_packets)*100/real((n_init_packets-n_inactive_packets-n_abs_packets)),'%'
            !WRITE(27,*)''
            WRITE(27,103)'DUST MASS',dust%mass
            !WRITE(27,*)'OUTPUT FILENAME:  ', trim(filename)
        ELSE
            WRITE(27,103)'DUST MASS',dust%mass

            WRITE(27,101)'percentage of absorbed packets',real(n_abs_packets*100.0)/real(n_init_packets-n_inactive_packets)
            WRITE(27,101)'absorbed weight',abs_frac*100/real(n_init_packets-n_inactive_packets)
        END IF

        WRITE(27,102)'number abs',n_abs_packets,'number initialised',n_init_packets,'number inactive',n_inactive_packets,'total active and escaped?',n_los_packets
        WRITE(27,101)'AVERAGE OPTICAL DEPTH IN LAMBDA_0',mothergrid%n_rho_dust_av*dust%lambda_ext*(dust_geometry%R_max_cm-dust_geometry%R_min_cm)
        WRITE(27,101)'AVERAGE OPTICAL DEPTH IN V',mothergrid%n_rho_dust_av*dust%lambda_ext_V*(dust_geometry%R_max_cm-dust_geometry%R_min_cm)

ClOSE(25)
CLOSE(26)
CLOSE(27)


    END SUBROUTINE


END MODULE
