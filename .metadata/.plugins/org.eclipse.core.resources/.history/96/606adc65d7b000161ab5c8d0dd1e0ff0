MODULE initialise

    USE class_line
    USE class_geometry
    USE class_dust
    USE input


    IMPLICIT NONE


    REAL    ::  totvol          !total volume of supernova in 1e42cm^3
    REAL    ::  vol


    INTEGER(8)     ::  iP,idP,n,iGP,idPP,n_inactive,inu,freq(1),nsize, &
        & ios,nabs,iDoublet
    INTEGER :: iSh,n_threads,id(1),id_V(1)
    REAL :: width(3),E_0,nu_0,nu_max,nu_min, &
        & SCAT_RF_PT(2),nu_bin_width,lambda_bin,vel_bin, &
        & sizeparam, Tsubl,tot,shell_width, alb, &
        & const,csa,dummy,lambda_ext(1),lambda_sca(1),lambda_ext_V(1)
    REAL,DIMENSION(:,:),ALLOCATABLE :: nu_bin,tmp, &
        & grain_rad,Qext,Qsca, &
        & ggsca,grain_id, &
        & RSh,ab
    INTEGER :: ncl
    REAL,DIMENSION(:),ALLOCATABLE :: grid,mgrain

    REAL ::SCAT_RF_SN(2), &
        & SCAT_FIN(2),POS_SPH1(3),R_P,ndustav

    INTEGER(8),DIMENSION(:,:),ALLOCATABLE :: ix,iy,iz,NP
    REAL,DIMENSION(:),ALLOCATABLE      :: NP_BIN,Ere,Eim,diff

    CHARACTER(LEN=1024) :: filename,junk

    COMPLEX :: refrel

contains

    SUBROUTINE set_grid_globals()

        PRINT*,"Total number of cells",mothergrid%totcells

        ALLOCATE(grid_cell(mothergrid%totcells))
        ALLOCATE(nu_bin(n_bins,2))
        ALLOCATE(tmp(n_bins,1))
        ALLOCATE(grid(mothergrid%ncells(1)+mothergrid%ncells(2)+mothergrid%ncells(3)))
        ALLOCATE(NP(mothergrid%totcells,1))
        ALLOCATE(NP_BIN(n_bins))
        ALLOCATE(RSh(n_shells+1,2))


        nu_bin=0
        tmp=0
        grid=0
        NP=0
        NP_BIN=0
        RSh=0

        !CONSTRUCT DYNAMIC FILENAMES FOR EASY REFERENCE
        !WRITE(filename,'(A,E7.1E2,A,F4.2,A,F4.2,A,I0,A)') 'output/',dust%mass,'_rho',q,'_v',l,'_vs',VelShift,'.out'



        !CALCULATE OPACITIES
        CALL calculate_opacities()


        !CONSTRUCT GRID WITH NUMBER OF PHOTONS EMITTED PER CELL
        CALL construct_grid


        !CALCULATE FREQUENCY OF EMITTED LINE IN Hz
        nu_0=c*10**9/line%wavelength
        PRINT*,'LAMBDA_0',line%wavelength
        !CALCULATE AVERAGE OPTICAL DEPTH FROM Rin to Rout
        PRINT*,'EXTINCTION FOR LAMBDA_0 ',lambda_ext
        PRINT*,'SCATTERING FOR LAMBDA_0',lambda_sca
        PRINT*,'ALBEDO FOR LAMBDA_0',lambda_sca/lambda_ext
        PRINT*,'AVERAGE OPTICAL DEPTH IN LAMBDA_0',ndustav*lambda_ext*(dust_geometry%R_max_cm-dust_geometry%R_min_cm)
        PRINT*,'AVERAGE OPTICAL DEPTH IN V',ndustav*lambda_ext_V*(dust_geometry%R_max_cm-dust_geometry%R_min_cm)
        PRINT*,'AVERAGE NUMBER DENSITY',ndustav

        PRINT*,'EFFECTIVE SPHERICAL RADIUS OF CLUMP (cm)',width(1)*(3.0/(4.0*pi))**0.3333333
        PRINT*,'EFFECTIVE SPHERICAL RADIUS AS A FRACTION OF Rout',(width(1)/dust_geometry%R_max_cm)*(3.0/(4.0*pi))**0.3333333
        PRINT*,'AVERAGE OPTICAL DEPTH OF A CELL IN LAMBDA_0',ndustav*lambda_ext*0.5*width(1)*(3.0/(4.0*pi))**0.3333333
        PRINT*,'AVERAGE OPTICAL DEPTH OF A CELL IN LAMBDA_V',ndustav*lambda_ext_V*0.5*width(1)*(3.0/(4.0*pi))**0.3333333
!CALCULATE FREQUENCY BINS ARRAY

            !MAX element here to account for ES velocities

            IF (lg_doublet) THEN
                IF (line%doublet_wavelength_2>line%doublet_wavelength_1) THEN
                    nu_max=5*((c*10**9/line%doublet_wavelength_1)/(1-MAX(dust_geometry%v_max,2000.0)*10**3/c))        !arbitrary factor of 5 to compensate for multiple scatterings
                    nu_min=0.2*((c*10**9/line%doublet_wavelength_2)/(1+MAX(dust_geometry%v_max,2000.0)*10**3/c))        !as above
                ELSE
                nu_max=5*((c*10**9/line%doublet_wavelength_2)/(1-MAX(dust_geometry%v_max,2000.0)*10**3/c))        !arbitrary factor of 5 to compensate for multiple scatterings
                nu_min=0.2*((c*10**9/line%doublet_wavelength_1)/(1+MAX(dust_geometry%v_max,2000.0)*10**3/c))        !as above
            END IF
            ELSE
            nu_max=5*(nu_0/(1-MAX(dust_geometry%v_max,2000.0)*10**3/c))  !arbitrary factor of 4 to compensate for multiple scatterings
                                                                                                !shifting nu beyond maxnu for 1 scattering event
            nu_min=0.2*(nu_0/(1+MAX(dust_geometry%v_max,2000.0)*10**3/c))                !as above
            END IF
        nu_bin_width=(nu_max-nu_min)/n_bins

        !CALCULATE FREQUENCY BINS AND WRITE TO FILE
        IF (iDoublet==1) THEN
        DO inu=1,n_bins
            nu_bin(inu,1)=nu_min+((inu-1)*nu_bin_width)
            nu_bin(inu,2)=nu_min+((inu)*nu_bin_width)
        END DO
        END IF
    END SUBROUTINE

    SUBROUTINE calculate_opacities()

      REAL  ::  av_rhograin
        !CALCULATE Qext FOR EACH GRAIN SIZE AND WAVELENGTH


        !OPEN(unit=13,file=trim(dustDataFile))
        call calculate_sizes()
        PRINT*, 'PLINY parameters in use - set 2'
        PRINT*,'amin',dust%species(1)%amin
        PRINT*,'amax',dust%species(1)%amax
        PRINT*,'aslope',dust%species(1)%power

       av_rhograin=0

        DO ii=1,dust%n_species
             OPEN(13,file=PREFIX//"/share/damocles/"//trim(dust%species(ii)%dataFile))


            READ(13,*) dust%species(ii)%nwav
            READ(13,*)
            READ(13,*) junk,Tsubl,dust%species(ii)%rhograin


            ALLOCATE(dust%species(ii)%wav(dust%species(ii)%nwav))
            ALLOCATE(Ere(dust%species(ii)%nwav))
            ALLOCATE(Eim(dust%species(ii)%nwav))

            PRINT*,''

            DO jj=1,dust%species(ii)%nwav
                READ(13,*) dust%species(ii)%wav(jj),Ere(jj),Eim(jj)
            END DO
            !calculate average grain density across all species
            av_rhograin=av_rhograin+dust%species(ii)%vweight*dust%species(ii)%rhograin

            CLOSE(13)

            csa=0

            ALLOCATE(mgrain(dust%species(ii)%nsizes))

            DO jj=1,dust%species(ii)%nsizes
                mgrain(jj)=(4*pi*dust%species(ii)%radius(jj,1)**3*dust%species(ii)%rhograin*1e-12)/3                !in grams
                csa=csa+(dust%species(ii)%radius(jj,2)*pi*(dust%species(ii)%radius(jj,1)*1e-4)**2)
            END DO


            ALLOCATE(Qext(dust%species(ii)%nsizes,dust%species(ii)%nwav))
            ALLOCATE(Qsca(dust%species(ii)%nsizes,dust%species(ii)%nwav))
            ALLOCATE(ggsca(dust%species(ii)%nsizes,dust%species(ii)%nwav))
            ALLOCATE(dust%species(ii)%ext_opacity(dust%species(ii)%nwav))
            ALLOCATE(dust%species(ii)%sca_opacity(dust%species(ii)%nwav))
            ALLOCATE(dust%species(ii)%albedo(dust%species(ii)%nwav))
            ALLOCATE(dust%species(ii)%g(dust%species(ii)%nwav))

            dust%species(ii)%ext_opacity(:)=0.
            dust%species(ii)%sca_opacity(:)=0.
            dust%species(ii)%g(:)=0.
            OPEN(unit=24,file='output/opacity_wav.out')
            WRITE(24,*) 'species no - wav - extinction - scatter - g'
            !OPEN(unit=57,file='output/opacity_size.out')
            !WRITE(57,*) 'species no - wav - size - Qext - Qsca'
            OPEN(57,file='output/opacity_size.out')

            DO jj=1,dust%species(ii)%nwav
            alb=0
 !              PRINT*,j,dust%species(i)%wav(j)
               DO kk=1,dust%species(ii)%nsizes
                    !PRINT*,dust%species(i)%radius(k,1),dust%species(i)%radius(k,2)
                    sizeparam=2*pi*dust%species(ii)%radius(kk,1)/(dust%species(ii)%wav(jj))

                    refrel=cmplx(Ere(jj),Eim(jj))

                    call BHmie(sizeparam,refrel,Qext(kk,jj),Qsca(kk,jj),ggsca(kk,jj))
                    !PRINT*,Qext(k,j),Qsca(k,j),dust%species(i)%wav(j),dust%species(i)%radius(k,1)
                    alb=alb+(dust%species(ii)%radius(kk,2)*(Qsca(kk,jj)/Qext(kk,jj))*pi*(dust%species(ii)%radius(kk,1)*1e-4)**2)
                    dust%species(ii)%ext_opacity(jj)=dust%species(ii)%ext_opacity(jj)+(dust%species(ii)%radius(kk,2)*Qext(kk,jj)*pi*(dust%species(ii)%radius(kk,1)*1e-4)**2)                !NOTE here that grain_rad(j,2) is the relative abundance of grain with radius a
                    dust%species(ii)%sca_opacity(jj)=dust%species(ii)%sca_opacity(jj)+(dust%species(ii)%radius(kk,2)*Qsca(kk,jj)*pi*(dust%species(ii)%radius(kk,1)*1e-4)**2)
                    dust%species(ii)%g(jj)=dust%species(ii)%g(jj)+(dust%species(ii)%radius(kk,2)*ggsca(kk,jj)*pi*(dust%species(ii)%radius(kk,1)*1e-4)**2)

                    !IF (j==34) THEN
!                       PRINT*,'this is working'
                    !  WRITE(57,*) i,j,k,dust%species(i)%wav(j),dust%species(i)%radius(k,1),Qext(k,j),Qsca(k,j),Qsca(k,j)/Qext(k,j)
                    !END IF
                   !IF (j==2982) THEN
                    !   PRINT*,'writing'
                    !   WRITE(24,*) dust%species(i)%wav(j),dust%species(i)%radius(k,1),dust%species(i)%ext_opacity(j),dust%species(i)%sca_opacity(j),dust%species(i)%g(j)
                    !END IF

                 END DO

                dust%species(ii)%albedo(jj)=dust%species(ii)%sca_opacity(jj)/dust%species(ii)%ext_opacity(jj)

                !PRINT*,j,dust%species(i)%wav(j)

            END DO

            CLOSE(24)
            CLOSE(57)
            DEALLOCATE(Ere)
            DEALLOCATE(Eim)
            DEALLOCATE(mgrain)
            DEALLOCATE(Qext)
            DEALLOCATE(Qsca)
            DEALLOCATE(ggsca)

        END DO


        !calculate average opacity for lamba_0
        lambda_ext=0
        lambda_ext_V=0
        DO jj=1,dust%n_species

           dust%species(jj)%mweight=dust%species(jj)%rhograin*dust%species(jj)%vweight/av_rhograin
           PRINT*,dust%species(jj)%rhograin
           PRINT*,'mass weight',dust%species(jj)%mweight
           !find neareset wavelength to lambda_0

           id=MINLOC(ABS((dust%species(jj)%wav(:)-(line%wavelength/1000))))
           id_V=MINLOC(ABS((dust%species(jj)%wav(:)-(547.0/1000))))
           PRINT*,'id check',id,id_V
           PRINT*,'For species no',jj,'albedo',dust%species(jj)%sca_opacity(id)/dust%species(jj)%ext_opacity(id),'weight',dust%species(jj)%weight
           !calculate extinction for lambda_0 weighted sum over all species
           lambda_ext=lambda_ext+dust%species(jj)%weight*(dust%species(jj)%ext_opacity(id)-((dust%species(jj)%ext_opacity(id)-dust%species(jj)%ext_opacity(id-1))* &
                & ((dust%species(jj)%wav(id)-(line%wavelength/1000))/(dust%species(jj)%wav(id)-dust%species(jj)%wav(id-1)))))
           lambda_sca=lambda_sca+dust%species(jj)%weight*(dust%species(jj)%sca_opacity(id)-((dust%species(jj)%sca_opacity(id)-dust%species(jj)%sca_opacity(id-1))* &
                & ((dust%species(jj)%wav(id)-(line%wavelength/1000))/(dust%species(jj)%wav(id)-dust%species(jj)%wav(id-1)))))

           lambda_ext_V=lambda_ext_V+dust%species(jj)%weight*(dust%species(jj)%ext_opacity(id_V)-((dust%species(jj)%ext_opacity(id_V)-dust%species(jj)%ext_opacity(id_V-1))* &
                & ((dust%species(jj)%wav(id_V)-(547.0/1000))/(dust%species(jj)%wav(id_V)-dust%species(jj)%wav(id_V-1)))))

        END DO
      END SUBROUTINE calculate_opacities

END MODULE
